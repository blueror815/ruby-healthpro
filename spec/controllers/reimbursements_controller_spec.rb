require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ReimbursementsController, type: :controller do
  before do 
    @role = Role.find_by(name: 'admin')
    @role.permissions << Permission.where(action_name: 'manage', object_type: 'Timesheet')
    @user = FactoryGirl.create(:user, email: 'user@prohealth.com', role_id: @role.id, password:"123456789")
  end
  # This should return the minimal set of attributes required to create a valid
  # Reimbursement. As you add validations to Reimbursement, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ReimbursementsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'assigns all reimbursements as @reimbursements' do
      reimbursement = Reimbursement.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:reimbursements)).to eq([reimbursement])
    end
  end

  describe 'GET #show' do
    it 'assigns the requested reimbursement as @reimbursement' do
      reimbursement = Reimbursement.create! valid_attributes
      get :show, { id: reimbursement.to_param }, valid_session
      expect(assigns(:reimbursement)).to eq(reimbursement)
    end
  end

  describe 'GET #new' do
    it 'assigns a new reimbursement as @reimbursement' do
      sign_in @user
      get :new, {}, valid_session
      expect(assigns(:reimbursement)).to be_a_new(Reimbursement)
    end
  end

  describe 'GET #edit' do
    it 'assigns the requested reimbursement as @reimbursement' do
      reimbursement = Reimbursement.create! valid_attributes
      get :edit, { id: reimbursement.to_param }, valid_session
      expect(assigns(:reimbursement)).to eq(reimbursement)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Reimbursement' do
        expect do
          post :create, { reimbursement: valid_attributes }, valid_session
        end.to change(Reimbursement, :count).by(1)
      end

      it 'assigns a newly created reimbursement as @reimbursement' do
        post :create, { reimbursement: valid_attributes }, valid_session
        expect(assigns(:reimbursement)).to be_a(Reimbursement)
        expect(assigns(:reimbursement)).to be_persisted
      end

      it 'redirects to the created reimbursement' do
        post :create, { reimbursement: valid_attributes }, valid_session
        expect(response).to redirect_to(Reimbursement.last)
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved reimbursement as @reimbursement' do
        post :create, { reimbursement: invalid_attributes }, valid_session
        expect(assigns(:reimbursement)).to be_a_new(Reimbursement)
      end

      it "re-renders the 'new' template" do
        post :create, { reimbursement: invalid_attributes }, valid_session
        expect(response).to render_template('new')
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested reimbursement' do
        reimbursement = Reimbursement.create! valid_attributes
        put :update, { id: reimbursement.to_param, reimbursement: new_attributes }, valid_session
        reimbursement.reload
        skip('Add assertions for updated state')
      end

      it 'assigns the requested reimbursement as @reimbursement' do
        reimbursement = Reimbursement.create! valid_attributes
        put :update, { id: reimbursement.to_param, reimbursement: valid_attributes }, valid_session
        expect(assigns(:reimbursement)).to eq(reimbursement)
      end

      it 'redirects to the reimbursement' do
        reimbursement = Reimbursement.create! valid_attributes
        put :update, { id: reimbursement.to_param, reimbursement: valid_attributes }, valid_session
        expect(response).to redirect_to(reimbursement)
      end
    end

    context 'with invalid params' do
      it 'assigns the reimbursement as @reimbursement' do
        reimbursement = Reimbursement.create! valid_attributes
        put :update, { id: reimbursement.to_param, reimbursement: invalid_attributes }, valid_session
        expect(assigns(:reimbursement)).to eq(reimbursement)
      end

      it "re-renders the 'edit' template" do
        reimbursement = Reimbursement.create! valid_attributes
        put :update, { id: reimbursement.to_param, reimbursement: invalid_attributes }, valid_session
        expect(response).to render_template('edit')
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested reimbursement' do
      reimbursement = Reimbursement.create! valid_attributes
      expect do
        delete :destroy, { id: reimbursement.to_param }, valid_session
      end.to change(Reimbursement, :count).by(-1)
    end

    it 'redirects to the reimbursements list' do
      reimbursement = Reimbursement.create! valid_attributes
      delete :destroy, { id: reimbursement.to_param }, valid_session
      expect(response).to redirect_to(reimbursements_url)
    end
  end
end
